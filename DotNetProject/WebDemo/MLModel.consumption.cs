// This file was auto-generated by ML.NET Model Builder. 
using Microsoft.ML;
using Microsoft.ML.Data;
using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;

namespace WebDemo
{
    public partial class MLModel
    {
        /// <summary>
        /// model input class for MLModel.
        /// </summary>
        #region model input class
        public class ModelInput
        {
            [ColumnName(@"fixed acidity")]
            public float Fixed_acidity { get; set; }

            [ColumnName(@"volatile acidity")]
            public float Volatile_acidity { get; set; }

            [ColumnName(@"citric acid")]
            public float Citric_acid { get; set; }

            [ColumnName(@"residual sugar")]
            public float Residual_sugar { get; set; }

            [ColumnName(@"chlorides")]
            public float Chlorides { get; set; }

            [ColumnName(@"free sulfur dioxide")]
            public float Free_sulfur_dioxide { get; set; }

            [ColumnName(@"total sulfur dioxide")]
            public float Total_sulfur_dioxide { get; set; }

            [ColumnName(@"density")]
            public float Density { get; set; }

            [ColumnName(@"pH")]
            public float PH { get; set; }

            [ColumnName(@"sulphates")]
            public float Sulphates { get; set; }

            [ColumnName(@"alcohol")]
            public float Alcohol { get; set; }

            [ColumnName(@"quality")]
            public float Quality { get; set; }

        }

        #endregion

        /// <summary>
        /// model output class for MLModel.
        /// </summary>
        #region model output class
        public class ModelOutput
        {
            public float Score { get; set; }
        }
        #endregion

        private static string MLNetModelPath = Path.GetFullPath("MLModel.zip");

        /// <summary>
        /// Use this method to predict on <see cref="ModelInput"/>.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static ModelOutput Predict(ModelInput input)
        {
            MLContext mlContext = new MLContext();

            // Load model & create prediction engine
            ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var modelInputSchema);
            var predEngine = mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);

            ModelOutput result = predEngine.Predict(input);
            return result;
        }
    }
}
